# Blueprint metadata
blueprint:
  name: Hook - Switch
  description: |
    # Hook - Switch

    Hook automation which allows to control a switch. Supports brightness and color control both for white temperature and rgb switchs. Features may vary depending on the selected Controller.

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    A list of controllers supported by this hook is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks/switch#supported-controllers).

    📕 Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks/switch).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.

    ℹ️ Version 2022.09.10
  source_url: https://github.com/EckPhi/awesome-ha-blueprints/blob/main/blueprints/hooks/switch/switch.yaml
  domain: automation
  input:
    controller_device:
      name: (Required) Controller Device
      description: The controller device which will control the Switch. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ""
      selector:
        device:
          multiple: true
    controller_entity:
      name: (Required) Controller Entity
      description: The controller entity which will control the Switch. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ""
      selector:
        entity:
          multiple: true
    controller_model:
      name: (Required) Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          multiple: true
          options:
            - IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
            - IKEA E1525/E1745 TRÅDFRI Motion sensor
            - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer
            - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2)
            - IKEA E1744 SYMFONISK Rotary Remote
            - IKEA E1766 TRÅDFRI Open/Close Remote
            - IKEA E1766 TRÅDFRI Open/Close Remote (#2)
            - IKEA E1812 TRÅDFRI Shortcut button
            - IKEA E2001/E2002 STYRBAR Remote control
            - IKEA E2001/E2002 STYRBAR Remote control (#2)
            - IKEA ICTC-G-1 TRÅDFRI wireless dimmer
            - OSRAM AC025XX00NJ SMART+ Switch Mini
            - Philips 324131092621 Hue Dimmer switch
            - Philips 8718699693985 Hue Smart Button
            - Philips 929002398602 Hue Dimmer switch v2
            - SONOFF SNZB-03 Motion Sensor
            - SONOFF SNZB-04 Door/Window Sensor
            - SONOFF SNZB-04 Door/Window Sensor (#2)
            - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
    switch:
      name: (Required) Switch
      description: Switch which will be controlled with this automation.
      selector:
        entity:
          domain: switch
    control_timer:
      name: (Optional) Timer
      description: Timeout after which the Light will be turned off.
      default: "timer.none"
      selector:
        entity:
          domain: timer
    control_timer_duration:
      name: (Optional) Timer duration
      description: Duration of the timeout after which the Light will be turned off.
      default: "02:00:00"
      selector:
        duration:
    control_timer_action:
      name: (Optional) Action the timer performes, when time is up.
      default: Turn off
      selector:
        select:
          options:
            - Toggle
            - Turn on
            - Turn off

# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_device: !input controller_device
  controller_entity: !input controller_entity
  controller_models: !input controller_model
  # supported controllers and mappings
  switch: !input switch
  control_timer: !input control_timer
  enable_control_timer: "{{ control_timer | default('timer.none') != 'timer.none' }}"
  controller_mapping:
    IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote:
      turn_on: button_up_short
      turn_off: button_down_short
      toggle: button_center_short
    IKEA E1525/E1745 TRÅDFRI Motion sensor:
      turn_on: occupancy_start
      turn_off: occupancy_stop
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer:
      turn_on: button_up_short
      turn_off: button_down_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2):
      turn_on: button_up_double
      turn_off: button_down_double
    IKEA E1744 SYMFONISK Rotary Remote:
      toggle: click_short
    IKEA E1766 TRÅDFRI Open/Close Remote:
      turn_on: button_up_double
      turn_off: button_down_double
    IKEA E1766 TRÅDFRI Open/Close Remote (#2):
      turn_on: button_up_short
      turn_off: button_down_short
    IKEA E1812 TRÅDFRI Shortcut button:
      toggle: button_short
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: button_up_short
      turn_off: button_down_short
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      turn_on: button_up_double
      turn_off: button_down_double
    IKEA ICTC-G-1 TRÅDFRI wireless dimmer:
      turn_off: rotate_left
      turn_on: rotate_right
    OSRAM AC025XX00NJ SMART+ Switch Mini:
      turn_on: button_up_short
      turn_off: button_down_short
      toggle: button_center_short
    Philips 324131092621 Hue Dimmer switch:
      turn_on: button_on_short
      turn_off: button_off_short
    Philips 8718699693985 Hue Smart Button:
      toggle: button_short
    Philips 929002398602 Hue Dimmer switch v2:
      turn_on: button_on_short
      turn_off: button_off_short
    SONOFF SNZB-03 Motion Sensor:
      turn_on: occupancy_start
      turn_off: occupancy_stop
    SONOFF SNZB-04 Door/Window Sensor:
      turn_on: contact_opened
      turn_off: contact_closed
    SONOFF SNZB-04 Door/Window Sensor (#2):
      turn_on: contact_closed
      turn_off: contact_opened
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      turn_on: button_3_short
      turn_off: button_4_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      turn_on: button_3_short
      turn_off: button_4_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      turn_on: button_5_short
      turn_off: button_6_short
  action_mapping:
    Turn on: turn_on
    Turn off: turn_off
    Toggle: toggle
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  toggle: >
    {%- for controller_model in controller_models -%}
    {%- set mapping = controller_mapping[controller_model]["toggle"] | default(None) -%}
    {%- if mapping -%}
    {{ mapping }},
    {%- endif -%}
    {%- endfor -%}
  turn_on: >
    {%- for controller_model in controller_models -%}
    {%- set mapping = controller_mapping[controller_model]["turn_on"] | default(None) -%}
    {%- if mapping -%}
    {{ mapping }},
    {%- endif -%}
    {%- endfor -%}
  turn_off: >
    {%- for controller_model in controller_models -%}
    {%- set mapping = controller_mapping[controller_model]["turn_off"] | default(None) -%}
    {%- if mapping -%}
    {{ mapping }},
    {%- endif -%}
    {%- endfor -%}
  control_timer_action_input: !input control_timer_action
  control_timer_action: "{{ action_mapping[control_timer_action_input] }}"
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: ahb_controller_event
  - platform: event
    event_type: timer.finished
    id: trigger_control_timer
    event_data:
      controller: !input control_timer
condition:
  - condition: or
    conditions:
      - '{{ trigger.event.data["controller"] in controller_device }}'
      - '{{ trigger.event.data["controller"] in controller_entity }}'
      - '{{ trigger.id == "trigger_control_timer" }}'
action:
  - variables:
      action: "{% if trigger.id == 'trigger_control_timer' -%} {{ control_timer_action }} {%- else -%} {{ trigger.event.data.action }} {%- endif %}"
  - choose:
      - conditions: "{{ action in toggle }}"
        sequence:
          - service: switch.toggle
            entity_id: !input switch
      - conditions: "{{ action in turn_on }}"
        sequence:
          - service: switch.turn_on
            entity_id: !input switch
      - conditions: "{{ action in turn_off }}"
        sequence:
          - service: switch.turn_off
            entity_id: !input switch
  - if:
      - "{{ enable_control_timer }}"
    then:
      - choose:
          - conditions: '{{ states(switch) == "on" }}'
            sequence:
              - service: timer.start
                data:
                  entity_id: !input control_timer
                  duration: !input control_timer_duration
          - conditions: '{{ states(switch) == "off" }}'
            sequence:
              - service: timer.cancle
