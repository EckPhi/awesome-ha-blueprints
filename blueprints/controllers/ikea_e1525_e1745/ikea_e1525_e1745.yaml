# Blueprint metadata
blueprint:
  name: Controller - IKEA E1525/E1745 TR√ÖDFRI Motion sensor
  description: |
    # Controller - IKEA E1525/E1745 TR√ÖDFRI Motion sensor

    Controller automation for executing any kind of action triggered by the provided IKEA E1525/E1745 TR√ÖDFRI Motion sensor. Allows to optionally loop an action on a button long press.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812#available-hooks) for additional details.

    üìï Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1525_e1745).

    üöÄ This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**.

    ‚ÑπÔ∏è Version 2022.05.12
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1525_e1745/ikea_e1525_e1745.yaml
  domain: automation
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_entity:
      name: (Required) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the motion sensor is integrated with Zigbee2MQTT.
      default: ""
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    lightsensor:
      name: (Optional) Enable illuminance sensor usage
      default: false
      selector:
        boolean:
    lightsensor_entity:
      name: (Optional) Illuminance sensor
      description: The light sensor of the controller to use for the automation.
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminace_level:
      name: (Optional) Illuminance threshold
      description: The level of illuminance used to decide if it is dark.
      default: 80
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    no_motion_wait:
      name: (Optional) No motion wait time
      description: Time to leave the light on after last motion is detected.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    no_motion_wait_decrease_brightnes:
      name: (Optional) No motion wait brightness decrease
      default: true
      selector:
        boolean:
    fire_morning:
      name: (Optional) Fire events in the morning
      default: false
      selector:
        boolean:
    fire_day:
      name: (Optional) Fire events durring daytime
      default: false
      selector:
        boolean:
    fire_evening:
      name: (Optional) Fire events in the evening
      default: false
      selector:
        boolean:
    fire_night:
      name: (Optional) Fire events at night
      default: true
      selector:
        boolean:
    # inputs for custom actions
    action_no_motion:
      name: (Optional) No Motion Action
      description: Action for no motion state. Will be activated when no motion is detected.
      default: []
      selector:
        action:
    action_ambient:
      name: (Optional) Ambient Action
      description: Action for ambient state. Will be activated when no motion is detected and light level is under threshold.
      default: []
      selector:
        action:
    time_action_ambient_start:
      name: (Optional) Ambient time frame start
      description: Time from which on ambient action will be activated
      default: "00:00:00"
      selector:
        time:
    time_action_ambient_end:
      name: (Optional) Ambient time frame end
      description: Time from which on ambient action will be not activated
      default: "00:00:00"
      selector:
        time:
    action_morning:
      name: (Optional) Action for the morning
      default: []
      selector:
        action:
    time_action_morning:
      name: (Optional) Time for the morning action
      description: A time input which defines the time from which on the action will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    action_day:
      name: (Optional) Action for the bright day
      default: []
      selector:
        action:
    time_action_day:
      name: (Optional) Time for the day action
      description: A time input which defines the time from which on the action will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    action_evening:
      name: (Optional) Action for the evening
      default: []
      selector:
        action:
    time_action_evening:
      name: (Optional) Time for the evening action
      description: A time input which defines the time from which on the action will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    action_night:
      name: (Optional) Action for the dark night
      default: []
      selector:
        action:
    time_action_night:
      name: (Optional) Time for the night action
      description: A time input which defines the time from which on the action will be activated if motion is detectedd.
      default: "00:00:00"
      selector:
        time:
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  # integration id used to select items in the action mapping
  integration_id: "{{ integration | lower }}"
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      motion: [on]
      no_motion: [off]
    zha:
      motion: [on]
      no_motion: [off]
    zigbee2mqtt:
      motion: [on]
      no_motion: [off]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  motion: '{{ actions_mapping[integration_id]["motion"] }}'
  no_motion: '{{ actions_mapping[integration_id]["no_motion"] }}'
  fire_morning: !input fire_morning
  fire_day: !input fire_day
  fire_evening: !input fire_evening
  fire_night: !input fire_night
  no_motion_wait_decrease_brightnes: !input no_motion_wait_decrease_brightnes
  controller_id: !input controller_entity

mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: state
    entity_id: !input controller_entity
    to: "{{ motion }}"
action:
  # choose the sequence to run based on the received motion event
  - choose:
      - conditions:
          - condition: time
            after: !input time_action_morning
            before: !input time_action_day
          - condition: numeric_state
            enabled: !input lightsensor
            entity_id: !input lightsensor_entity
            below: !input illuminace_level
        sequence:
          # fire the event
          - choose:
              - conditions: "{{ fire_morning }}"
                sequence:
                  - event: ahb_controller_event
                    event_data:
                      controller: "{{ controller_id }}"
                      action: occupancy_start
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_morning
      - conditions:
          - condition: time
            after: !input time_action_day
            before: !input time_action_evening
          - condition: numeric_state
            enabled: !input lightsensor
            entity_id: !input lightsensor_entity
            below: !input illuminace_level
        sequence:
          # fire the event
          - choose:
              - conditions: "{{ fire_day }}"
                sequence:
                  - event: ahb_controller_event
                    event_data:
                      controller: "{{ controller_id }}"
                      action: occupancy_start
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_day
      - conditions:
          - condition: time
            after: !input time_action_evening
            before: !input time_action_night
          - condition: numeric_state
            enabled: !input lightsensor
            entity_id: !input lightsensor_entity
            below: !input illuminace_level
        sequence:
          # fire the event
          - choose:
              - conditions: "{{ fire_evening }}"
                sequence:
                  - event: ahb_controller_event
                    event_data:
                      controller: "{{ controller_id }}"
                      action: occupancy_start
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_evening
      - conditions:
          - condition: time
            after: !input time_action_night
            before: !input time_action_morning
          - condition: numeric_state
            enabled: !input lightsensor
            entity_id: !input lightsensor_entity
            below: !input illuminace_level
        sequence:
          # fire the event
          - choose:
              - conditions: "{{ fire_night }}"
                sequence:
                  - event: ahb_controller_event
                    event_data:
                      controller: "{{ controller_id }}"
                      action: occupancy_start
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_night
  - wait_for_trigger:
      # trigger for zigbee2mqtt
      - platform: state
        entity_id: !input controller_entity
        to: "{{ no_motion }}"
  - choose:
      - conditions: "{{ no_motion_wait_decrease_brightnes }}"
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: "{{ controller_id }}"
              action: occupancy_pause
  - delay: !input no_motion_wait
  - choose:
      - conditions:
          - condition: time
            after: !input time_action_ambient_start
            before: !input time_action_ambient_end
          - condition: numeric_state
            enabled: !input lightsensor
            entity_id: !input lightsensor_entity
            below: !input illuminace_level
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: "{{ controller_id }}"
              action: occupancy_pause
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_ambient
    default:
      # fire the event
      - event: ahb_controller_event
        event_data:
          controller: "{{ controller_id }}"
          action: occupancy_stop
      # run the custom action
      - conditions: []
        sequence: !input action_no_motion
